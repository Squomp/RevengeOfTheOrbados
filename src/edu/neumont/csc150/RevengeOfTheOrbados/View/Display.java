package edu.neumont.csc150.RevengeOfTheOrbados.View;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowEvent;

import javax.swing.ImageIcon;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import java.util.Random;


import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

import edu.neumont.csc150.RevengeOfTheOrbados.Controller.GameManager;
import edu.neumont.csc150.RevengeOfTheOrbados.Model.Orbo;

public class Display extends JPanel implements ActionListener, KeyListener, MouseListener, MouseMotionListener {

	private GameManager game;
	private boolean pause = false;
	private Timer orboMoveTimer, orboSpawnTimer, buyTimer;
	private Image lightTower,heavyTower,fastTower = null;
	private ArrayList<Orbo> orbos = new ArrayList<>();
	private Random r = new Random();
	private boolean possibleLevelValue;
	
	Point xLocation = MouseInfo.getPointerInfo().getLocation();
	Point yLocation=MouseInfo.getPointerInfo().getLocation();
	
	private int height=200, width =200, x, y;
	
	private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private JFrame window;
	private BufferedImage levelBackground;
	private boolean lightTowerClicked = false;
	/**
	 * create new Display instance
	 * @throws IOException 
	 */
	public Display(GameManager game) throws IOException{
		this.game = game;
		levelBackground = ImageIO.read(new File("images/LevelBackground.png"));
	}
	
	/**
	 * create the start menu
	 * @param window
	 */
	public void initializeStartMenu(JFrame window){
		Object options[] = {"Start", "Exit"};
		int choice = JOptionPane.showOptionDialog(window, "Are you ready to start?", "Menu", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
		if(choice == JOptionPane.CLOSED_OPTION || choice == 1){
			System.exit(1);
		}
	}
	
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    public void initComponents() {

        jPanel1 = this;
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        window = new JFrame();
        //initializeStartMenu(window);
        
        window.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        window.setExtendedState(JFrame.MAXIMIZED_BOTH);
        window.addKeyListener(this);
        window.setTitle("Revenge of the Orbados");
        setBounds(new java.awt.Rectangle(0, 0, 2560, 1440));
        setPreferredSize(new java.awt.Dimension(1920, 1080));
        setSize(new java.awt.Dimension(2560, 1440));

        jPanel1.setBackground(new java.awt.Color(0, 0, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2003, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1710, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        jLabel1.setText("Round Progress");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        jLabel2.setText("Current Round: ");

        jProgressBar1.setBackground(new java.awt.Color(102, 255, 102));
        jProgressBar1.setForeground(new java.awt.Color(102, 255, 102));

        jButton1.setIcon(new javax.swing.ImageIcon("images/FastTowerBTN.png")); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon("images/LightTowerBTN.png")); // NOI18N

        jButton3.setIcon(new javax.swing.ImageIcon("images/HeavyTowerBTN.png")); // NOI18N
        
        jButton1.setIcon(new javax.swing.ImageIcon("images\\FastTowerBTN.png")); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon("images\\LightTowerBTN.png")); // NOI18N

        jButton3.setIcon(new javax.swing.ImageIcon("images\\HeavyTowerBTN.png")); // NOI18N

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        jButton4.setText("Upgrade Tower");
        jButton4.setEnabled(false);

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        jButton5.setText("Sell Tower");
        jButton5.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        jLabel3.setText("Money:");
        jLabel3.setToolTipText(" ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(200, 200, 200))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(133, 133, 133)
                            .addComponent(jLabel3))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(125, 125, 125))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(25, 25, 25)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jLabel1.getAccessibleContext().setAccessibleName("roundProgressLBL");
        jLabel2.getAccessibleContext().setAccessibleName("currentRoundLBL");
        jProgressBar1.getAccessibleContext().setAccessibleName("roundProgressBAR");
        jProgressBar1.getAccessibleContext().setAccessibleDescription("");
        jButton1.getAccessibleContext().setAccessibleName("fastTowerBTN");
        jButton2.getAccessibleContext().setAccessibleName("lightTowerBTN");
        jButton3.getAccessibleContext().setAccessibleName("heavyTowerBTN");
        jButton4.getAccessibleContext().setAccessibleName("upgradeTowerBTN");
        jButton5.getAccessibleContext().setAccessibleName("sellTowerBTN");
        jLabel3.getAccessibleContext().setAccessibleName("moneyLBL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(window.getContentPane());
        window.getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jPanel1.getAccessibleContext().setAccessibleName("gamePanel");
        jPanel2.getAccessibleContext().setAccessibleName("menuPanel");
        
        window.getContentPane().add(jPanel1);
        window.pack();
        window.setVisible(true);
        
        orboSpawnTimer = new Timer(1000, this);
        orboSpawnTimer.start();
        
        orboMoveTimer = new Timer(1, this);
        orboMoveTimer.start();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public void GUImain() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

    }
	@Override
	public void paint(Graphics g){
		super.paint(g);

		g.drawImage(levelBackground, jPanel1.getX(), jPanel1.getY(), this);
		// square width = 90 height = 74
		g.drawImage(levelBackground, (jPanel1.getX() + 5), (jPanel2.getY() + 3), 1800, 1258, this);

		for(Orbo orbo: orbos){
			g.setColor(Color.GREEN);
			g.fillOval(orbo.getxPos(), orbo.getyPos(), orbo.getWidth(), orbo.getHeight());
		}
//		if(lightTowerClicked == true){
//			g.drawImage(lightTower, x, y, this);
//		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		int orboSpeed = 4;
		if (e.getSource() == this.orboSpawnTimer) {
			while (!possibleLevelValue) {
				int x = r.nextInt(6) + 2;
				if(x == 2 || x == 4 || x == 6){
					possibleLevelValue = true;
				}
			}
			orbos.add(game.newOrbo(x));
		}
		if (e.getSource() == this.orboMoveTimer){
			for(Orbo orbo: orbos){
				if (orbo.getxPos() > 24 && orbo.getxPos() < 205 && orbo.getyPos() > 614 && orbo.getyPos() < 690) {
					orbo.setxPos(orbo.getxPos() + orboSpeed);
				}
				else if (orbo.getxPos() >= 205 && orbo.getxPos() <= 215 && orbo.getyPos() > 102){
					orbo.setyPos(orbo.getyPos() - orboSpeed);
				}
				else if (orbo.getxPos() >= 205 && orbo.getxPos() < 480 && orbo.getyPos() < 180){
					orbo.setxPos(orbo.getxPos() + orboSpeed);
				}
			}
		}
		this.repaint();
	}
	
	@Override
	public void mouseClicked(MouseEvent e) {
//		if(e.getSource()=="lightTowerBTN"){
//			lightTower = new ImageIcon("images/LightTowerIcon.png").getImage();
//			
//			repaint();
//		}
	}
	
	@Override
	public void mouseDragged(MouseEvent arg0){
//		if(lightTowerClicked){
//	           x = arg0.getX() - (width / 2);
//	            y = arg0.getY() - (height / 2);
//	            this.repaint();
//	            }
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
//        if(e.getX() > x && e.getX() < (x + width) && e.getY() > y && e.getY() < (y + height)){
//			lightTowerClicked = true;
//        }
	}

	@Override
	public void mouseMoved(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		if(e.getKeyCode() == 80){ //p
			if (!pause) {
				try {
					Thread.currentThread().wait();
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
			else if(pause){
				Thread.currentThread().notify();
			}
		}
	}

}
